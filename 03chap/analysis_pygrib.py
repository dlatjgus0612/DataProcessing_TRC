# -*- coding: utf-8 -*-
"""analysis_pygrib.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DivehgRxk3u1KbzQmgvx8xX3GQkga8wv

# Pygrib을 이용하여 grib 파일 분석 및 태풍 탐지

## 기본 설정 및 데이터 변수 확인
"""

!pip install pygrib
!pip install basemap
!pip install basemap-data-hires

import pygrib
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.basemap import Basemap
from scipy import stats
from scipy.ndimage import gaussian_filter

from google.colab import drive
drive.mount('/content/drive')

"""file은 여기서 받아 직접 경로에 넣어주자. 다른 파일로도 바꿔서 해보자
https://rda.ucar.edu/datasets/d083003/filelist/202408/
"""

file_path = "/content/drive/MyDrive/Colab Notebooks/gdas1.fnl0p25.2023072406.f00.grib2"
#file_path = "/content/drive/MyDrive/Colab Notebooks/gdas1.fnl0p25.2024082006.f09.grib2"

# 파일 열기
grbs = pygrib.open(file_path)

# 첫 번째 메시지 가져오기
grb = grbs[1]

print("사용 가능한 키:")
for key in grb.keys():
    print(key)

# 데이터 추출
pressure_data, lats, lons = grb.data()

# 파일 닫기
grbs.close()

print("----기본 정보----")
print(f"GRIB 버전: {grb.GRIBEditionNumber}")
print(f"Discipline: {grb.discipline}")
print(f"센터: {grb.centreDescription}")

print("\n----시간 정보----")
print(f"데이터 날짜: {grb.dataDate}")
print(f"데이터 시간: {grb.dataTime}")
print(f"예보 시간: {grb.forecastTime}")
print(f"유효 날짜: {grb.validityDate}")
print(f"유효 시간: {grb.validityTime}")

print("\n----공간 정보----")
print(f"격자 유형: {grb.gridType}")
print(f"격자 크기: {grb.Ni} x {grb.Nj}")
print(f"첫 격자점 (위도, 경도): ({grb.latitudeOfFirstGridPointInDegrees}, {grb.longitudeOfFirstGridPointInDegrees})")
print(f"마지막 격자점 (위도, 경도): ({grb.latitudeOfLastGridPointInDegrees}, {grb.longitudeOfLastGridPointInDegrees})")

print("\n----변수 정보----")
print(f"변수 이름: {grb.name}")
print(f"변수 약어: {grb.shortName}")
print(f"단위: {grb.units}")
print(f"매개변수 카테고리: {grb.parameterCategory}")
print(f"매개변수 번호: {grb.parameterNumber}")

print("\n----레벨 정보----")
print(f"레벨 유형: {grb.typeOfLevel}")
print(f"레벨 값: {grb.level}")

print("\n----데이터 표현----")
print(f"데이터 포인트 수: {grb.numberOfValues}")
print(f"압축 방식: {grb.packingType}")
print(f"비트 수/값: {grb.bitsPerValue}")

print("\n----통계 정보----")
print(f"최대값: {grb.maximum}")
print(f"최소값: {grb.minimum}")
print(f"평균: {grb.average}")
print(f"표준편차: {grb.standardDeviation}")

"""# 이상치 탐지
일단 이상한 기압. 즉 태풍이 있는지 수치, 그래프로 확인해보자

## Z-Score
데이터가 평균으로부터 몇 표준편차 떨어져 있는지 계산.
일반적으로 Z-점수의 절대값이 3보다 크면 이상치로 간주
"""

# 데이터 평탄화 (2D 배열을 1D로 변환)
pressure_flat = pressure_data.flatten()

# Z-점수 계산
z_scores = stats.zscore(pressure_flat)

# 이상치 기준 설정 (Z-점수 절대값 > 3)
outliers_z = np.where(np.abs(z_scores) > 3)

# 전체 데이터 개수와 이상치 비율 계산
total_count = len(pressure_flat)
outliers_count = len(outliers_z[0])
outliers_ratio = (outliers_count / total_count) * 100

print(f"총 데이터 개수: {total_count:,}")
print(f"Z-점수 이상치 개수: {outliers_count:,}")
print(f"이상치 비율: {outliers_ratio:.2f}%")

# 박스플롯 생성
plt.figure(figsize=(10, 6))
plt.boxplot(pressure_flat, vert=False)
plt.title('Pressure Data Boxplot with Outliers')
plt.xlabel('Pressure (Pa)')
plt.grid(True)
plt.show()

# 히스토그램 생성
plt.figure(figsize=(10, 6))
plt.hist(pressure_flat, bins=50, color='skyblue', edgecolor='black')
plt.title('Pressure Data Histogram')
plt.xlabel('Pressure (Pa)')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

"""## 사분위수 범위 (IQR)
Q1(25% 백분위수)과 Q3(75% 백분위수) 사이의 범위를 계산.
Q1 - 1.5 * IQR 미만이거나 Q3 + 1.5 * IQR 초과인 값을 이상치로 간주
"""

# 사분위수 계산
Q1 = np.percentile(pressure_data, 25)
Q3 = np.percentile(pressure_data, 75)
IQR = Q3 - Q1

# 이상치 기준 설정 (1.5 * IQR 초과)
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
outliers_iqr = pressure_data[(pressure_data < lower_bound) | (pressure_data > upper_bound)]
print(f"IQR 이상치 개수: {len(outliers_iqr)}")

"""### 두 score의 차이를 시각화"""

# Z-score와 IQR 이상치를 모두 표시하는 히스토그램
plt.figure(figsize=(12, 6))
plt.hist(pressure_flat, bins=100, color='lightgray', edgecolor='black')

# IQR 경계선
plt.axvline(x=lower_bound, color='red', linestyle='--', label='IQR Bounds')
plt.axvline(x=upper_bound, color='red', linestyle='--')

# Z-score 경계선
mean = np.mean(pressure_flat)
std = np.std(pressure_flat)
plt.axvline(x=mean - 3*std, color='blue', linestyle='--', label='Z-score Bounds (±3σ)')
plt.axvline(x=mean + 3*std, color='blue', linestyle='--')

plt.title('Pressure Data with Both IQR and Z-score Outliers')
plt.xlabel('Pressure (Pa)')
plt.ylabel('Frequency')
plt.legend()
plt.grid(True)
plt.show()

"""### 이 그래프를 보고 판별할 수 있는 점
- 데이터가 정규분포와 유사하지만 완벽하진 않다. (righ-skewed: 오른쪽으로 치우친)
- 중심 부근 100000-102000 Pa 에서 가장 높은 빈도

- IQR이 더 보수적으로 보고 있구나
- 94000-96000, 104000-106000 에서 낮은 빈도의 데이터가 존재한다. -> 이게 이상치로 판별 !
- 특히 98000 Pa 부근에서 작은 봉우리(peak)가 형성되어 있는데, 이는 일반적인 기압 분포와 다른 패턴으로 이상치로 판별

- 어차피 정규분포가 아니니 두 방법을 함께 쓰는 것이 좋다.
- 그래프를 보고 유난히 ~ 이런 부분이 있군, 태풍이 있을 수도 있겠군? 정도로 판별하면 될듯

# 태풍 판별 기준
# 이미지 빠짐

**- 중심 기압 기준**


일반적으로 태풍의 중심 기압은 98000 Pa (980hPa) 이하

그래프에서 94000-98000 Pa 구간의 뚜렷한 이상치들이 태풍의 존재를 암시



**- 기압 차이**


히스토그램에서 정상 기압(약 101000 Pa)과 저기압(94000-98000 Pa) 사이의 차이가 3000-7000 Pa

이정도의 급격한 기압 차이는 태풍의 특징적인 패턴


- 분포 패턴
**굵은 텍스트**

98000 Pa 부근의 작은 봉우리(secondary peak)는 태풍 주변부의 특징적인 기압 분포를 나타낼 수 있음

박스플롯의 왼쪽 끝에 집중된 이상치들(94000-96000 Pa)은 강한 태풍의 중심부를 나타낼 수 있음

# 태풍 중심 탐지
## 태풍 특징 기압 위치 확인
- 단순 최저로 하나 잡고 하면 아닐 가능성이 있기에 이상치로 잡은 곳 중 특정 5군데 정도를 고른다
- 와도와 OWZ를 이용하여 특정 지점을 골라보자

## 와도 Vorticity 분석
- 저기압 중심 주변의 회전 강도를 측정.
- 양(+)의 와도 값이 크면 태풍과 같은 순환 시스템일 가능성이 높다
"""

def calculate_vorticity(pressure, lats, lons):
    # 위도에 따른 거리 보정
    dx = np.cos(np.deg2rad(lats)) / 111320
    # np.deg2rad 위도를 degree to radian
    # np.cos 위도에 따른 경도 방향거리 보정 (위도 높아질 수록 경도 간격이 좁아짐)
    # 111320 : 지구 표면에서 1도당 거리
    dy = np.ones_like(lats) / 111320
    # 위도 방향은 보정이 필요 없으므로 1로 채움.

    # 기압경도력 계산 / du : 경도 방향으로 기압 변화 (x) / dv : 위도 방향으로 기압 변화 (y)
    # *dx, *dy 거리에 대한 보정 적용
    du = np.gradient(pressure, axis=1) * dx
    dv = np.gradient(pressure, axis=0) * dy

    # 와도 계산
    # x방향 변화율 - y방향변화율
    # 양의 와도 (반시계), 음의 와도 (시계)
    vorticity = np.gradient(dv, axis=1) - np.gradient(du, axis=0)
    return vorticity

# 와도 계산
vorticity = calculate_vorticity(pressure_data, lats, lons)

"""## OWZ (Okubo-Weiss-Zeta) Parameter
- 와도 + 변형률 + 발산 을 결합하여 순환의 강도 측정
- 값이 높은 지역은 태풍 형성 가능성이 높다
"""

def calculate_owz(vorticity, pressure, lats, lons):
    # 위도에 따른 거리 보정
    dx = np.cos(np.deg2rad(lats)) / 111320
    dy = np.ones_like(lats) / 111320

    # 기압경도력 계산 / du : 경도 방향으로 기압 변화 (x) / dv : 위도 방향으로 기압 변화 (y)
    # *dx, *dy 거리에 대한 보정 적용
    du = np.gradient(pressure, axis=1) * dx
    dv = np.gradient(pressure, axis=0) * dy

    # 발산 계산
    divergence = np.gradient(du, axis=1) + np.gradient(dv, axis=0)

    # OWZ 계산
    owz = vorticity**2 - divergence**2
    return owz

# OWZ 계산
owz = calculate_owz(vorticity, pressure_data, lats, lons)

def calculate_distance(lat1, lon1, lat2, lon2):
    """두 지점 간의 거리(도 단위)를 계산"""
    return np.sqrt((lat2-lat1)**2 + (lon2-lon1)**2)

def find_significant_points(pressure_data, lats, lons, owz, threshold=980000, max_points=7, min_distance=8):
    candidates = []
    selected_points = []

    # 기존 코드와 동일
    pressure_flat = pressure_data.flatten()
    flat_indices = np.argsort(pressure_flat)
    i_indices, j_indices = np.unravel_index(flat_indices, pressure_data.shape)

    for i, j in zip(i_indices, j_indices):
        if lats[i,j] >= -65 and lats[i,j] <= 65:
            if pressure_data[i,j] < threshold:
                surrounding = pressure_data[max(0,i-5):min(i+6,pressure_data.shape[0]),
                                         max(0,j-5):min(j+6,pressure_data.shape[1])]
                pressure_diff = np.mean(surrounding) - pressure_data[i,j]

                # 기압차 임계값 낮춤
                if pressure_diff > 200:  # 300에서 200으로 낮춤
                    too_close = False
                    for selected in selected_points:
                        dist = calculate_distance(lats[i,j], lons[i,j],
                                               selected['lat'], selected['lon'])
                        if dist < min_distance:
                            too_close = True
                            break

                    if not too_close:
                        point = {
                            'lat': lats[i,j],
                            'lon': lons[i,j],
                            'pressure': pressure_data[i,j],
                            'pressure_diff': pressure_diff,
                            'owz_value': owz[i,j]
                        }
                        selected_points.append(point)
                        candidates.append(point)

                        if len(candidates) >= max_points:
                            break

    candidates.sort(key=lambda x: x['pressure_diff'], reverse=True)
    return candidates

# 특징적인 위치 찾기
significant_points = find_significant_points(pressure_data, lats, lons, owz, max_points=7)

# 시각화
plt.figure(figsize=(15, 10))
plt.contourf(lons, lats, pressure_data, levels=20, cmap='RdBu_r')
plt.colorbar(label='Pressure (Pa)')

colors = ['red', 'orange', 'yellow', 'green', 'blue']
markers = ['*', 'o', 's', '^', 'D']

for i, (point, color, marker) in enumerate(zip(significant_points, colors, markers)):
    plt.plot(point['lon'], point['lat'], marker=marker, color=color,
            markersize=12, label=f"Rank {i+1}: {point['pressure']:.0f} Pa")

    plt.annotate(f"Rank {i+1}\n{point['pressure']:.0f} Pa",
                (point['lon'], point['lat']),
                xytext=(20 + i*5, 20 + i*5),
                textcoords='offset points',
                bbox=dict(facecolor='white', alpha=0.7),
                arrowprops=dict(arrowstyle='->'))

plt.title('Significant Low Pressure Points')
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.legend(bbox_to_anchor=(1.15, 1))
plt.grid(True, linestyle='--', alpha=0.6)
plt.xlim(0, 360)
plt.ylim(-90, 90)

plt.tight_layout()
plt.show()

"""# 태풍 경계 판별
- 주변 지역과의 기압 차이를 계산
- 급격한 기압 경도는 강한 바람과 순환을 나타냄
"""

def plot_pressure_around_points(pressure_data, lats, lons, significant_points, radius=5):
    plt.figure(figsize=(15, 10))

    # 전체 기압 분포도 표시
    plt.contourf(lons, lats, pressure_data, levels=20, cmap='RdBu_r')
    plt.colorbar(label='Pressure (Pa)')

    # 각 특징점 주변의 등압선 표시
    colors = ['red', 'orange', 'yellow', 'green', 'blue', 'purple', 'brown']
    markers = ['*', 'o', 's', '^', 'D', 'v', 'p']

    for i, (point, color, marker) in enumerate(zip(significant_points, colors, markers)):
        # 특징점 표시
        plt.plot(point['lon'], point['lat'], marker=marker, color=color,
                markersize=12, label=f"Point {i+1}: {point['pressure']:.0f} Pa")

        # 특징점 주변의 등압선 그리기
        plt.contour(lons, lats, pressure_data,
                   levels=np.linspace(point['pressure'], point['pressure']+2000, 8),
                   colors=[color], linestyles='-', linewidths=1,
                   extent=[point['lon']-radius, point['lon']+radius,
                          point['lat']-radius, point['lat']+radius])

    plt.title('Low Pressure Systems with Isobars')
    plt.xlabel('Longitude')
    plt.ylabel('Latitude')
    plt.legend(bbox_to_anchor=(1.15, 1))
    plt.grid(True, linestyle='--', alpha=0.6)
    plt.xlim(0, 360)
    plt.ylim(-90, 90)

    plt.tight_layout()
    plt.show()

plot_pressure_around_points(pressure_data, lats, lons, significant_points, radius=5)

"""# 실제 일기도와 함께보기"""

def plot_weather_map(pressure_data, lats, lons, significant_points):
    # Convert Pa to hPa
    pressure_data = pressure_data / 100

    # Apply Gaussian smoothing
    pressure_data_smooth = gaussian_filter(pressure_data, sigma=3)

    # Create figure
    plt.figure(figsize=(15, 10))

    # Create Basemap instance
    m = Basemap(projection='mill',
                llcrnrlat=-80, urcrnrlat=80,
                llcrnrlon=0, urcrnrlon=360,
                resolution='l')

    # Draw map features
    m.drawcoastlines(linewidth=0.5)
    m.drawcountries(linewidth=0.5)
    m.drawparallels(np.arange(-80.,81.,20.), labels=[1,0,0,0], fontsize=8)
    m.drawmeridians(np.arange(0.,361.,30.), labels=[0,0,0,1], fontsize=8)
    m.fillcontinents(color='lightgray', lake_color='white', alpha=0.3)

    # Convert lat/lon to map coordinates
    x, y = m(*np.meshgrid(lons[0,:], lats[:,0]))

    # Plot contours
    levels = np.arange(940, 1040, 2)
    cs = m.contour(x, y, pressure_data_smooth, levels=levels, colors='blue', linewidths=0.5)
    plt.clabel(cs, inline=True, fontsize=8, fmt='%1.0f')

    # Plot significant points
    colors = ['red', 'orange', 'yellow', 'green', 'blue', 'purple', 'brown']
    markers = ['*', 'o', 's', '^', 'D', 'v', 'p']

    for i, (point, color, marker) in enumerate(zip(significant_points, colors, markers)):
        x_point, y_point = m(point['lon'], point['lat'])
        m.plot(x_point, y_point, marker=marker, color=color, markersize=12,
               label=f"Point {i+1}: {point['pressure']/100:.0f} hPa")

        # Add L/H markers for low/high pressure systems
        if point['pressure'] < 98000:  # Low pressure
            plt.text(x_point, y_point, 'L', fontsize=12, color=color,
                    horizontalalignment='right', verticalalignment='bottom')
        else:  # High pressure
            plt.text(x_point, y_point, 'H', fontsize=12, color=color,
                    horizontalalignment='right', verticalalignment='bottom')

    plt.title('Weather Map with Significant Pressure Systems\n(Contours in hPa)')
    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')

    plt.tight_layout()
    plt.show()

# 함수 호출
plot_weather_map(pressure_data, lats, lons, significant_points)

"""## 특정 point 선택해서 보기"""

def zoom_pressure_point(pressure_data, lats, lons, selected_point, zoom_radius=20):
    plt.figure(figsize=(15, 10))

    # 선택된 지점 주변 영역 설정
    lat_min = max(-90, selected_point['lat'] - zoom_radius)
    lat_max = min(90, selected_point['lat'] + zoom_radius)
    lon_min = selected_point['lon'] - zoom_radius
    lon_max = selected_point['lon'] + zoom_radius

    # Basemap 생성
    m = Basemap(projection='merc',
                llcrnrlat=lat_min, urcrnrlat=lat_max,
                llcrnrlon=lon_min, urcrnrlon=lon_max,
                resolution='h')

    # 지도 색상 설정 순서 변경
    m.drawmapboundary(fill_color='lightcyan')  # 바다 색상
    m.fillcontinents(color='oldlace', lake_color='lightcyan')  # 대륙 색상, alpha 제거
    m.drawcoastlines(linewidth=0.8)
    m.drawcountries(linewidth=0.6)

    # 격자 그리기 (연한 초록색으로)
    parallels = np.arange(int(lat_min), int(lat_max)+1, 2)
    meridians = np.arange(int(lon_min), int(lon_max)+1, 2)
    m.drawparallels(parallels, labels=[1,0,0,0], fontsize=8, linewidth=0.5, color='lightgreen')
    m.drawmeridians(meridians, labels=[0,0,0,1], fontsize=8, linewidth=0.5, color='lightgreen')

    # 등압선 그리기
    x, y = m(*np.meshgrid(lons[0,:], lats[:,0]))

    # 전체 등압선
    levels = np.arange(940, 1040, 2)
    cs = m.contour(x, y, pressure_data/100, levels=levels,
                  colors='black', linewidths=0.7)
    plt.clabel(cs, inline=True, fontsize=8, fmt='%1.0f')

    # 선택된 지점 표시
    x_point, y_point = m(selected_point['lon'], selected_point['lat'])
    m.plot(x_point, y_point, 'r*', markersize=15, label='Center')
    plt.text(x_point, y_point, f"P: {selected_point['pressure']/100:.1f}hPa",
             fontsize=10, ha='right', va='bottom', color='red')

    # # 태풍 정보 추가 (Point 1인 경우)
    # if abs(selected_point['pressure']/100 - 952.1) < 0.1:
    #     x_text, y_text = m(selected_point['lon']+5, selected_point['lat']+5)
    #     plt.text(x_text, y_text,
    #             "TY2305 DOKSURI\nMOV: NW 9KT\nMAX: 97KT",
    #             color='red', fontsize=12)

    plt.title(f'Detailed View Around ({selected_point["lat"]:.1f}°N, {selected_point["lon"]:.1f}°E)\n'
             f'Central Pressure: {selected_point["pressure"]/100:.1f}hPa')

    plt.legend(loc='upper right')
    plt.tight_layout()
    plt.show()

def show_point_details():
    # 1. 먼저 available points 리스트를 보여주는 부분
    print("\nAvailable Low Pressure Systems:")
    for i, point in enumerate(significant_points):
        print(f"{i+1}. Pressure: {point['pressure']/100:.1f}hPa, Location: ({point['lat']:.1f}°N, {point['lon']:.1f}°E)")

    # 2. 사용자 입력 받기
    while True:
        try:
            point_num = int(input(f"\nSelect point number to analyze (1-{len(significant_points)}): ").strip())
            if 1 <= point_num <= len(significant_points):
                selected_point = significant_points[point_num-1]
                # 3. 전체 지도 표시
                plot_weather_map(pressure_data, lats, lons, significant_points)
                # 4. 선택된 포인트의 상세 지도 표시
                zoom_pressure_point(pressure_data, lats, lons, selected_point)
                break
            else:
                print(f"Please enter a number between 1 and {len(significant_points)}")
        except ValueError:
            print("Please enter a valid number")

show_point_details()